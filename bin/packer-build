#!/bin/bash
##
## My Packer templates and build script
## Copyright (c) 2015-2018 SATOH Fumiyasu @ OSS Technology Corp., Japan
##
## License: GNU General Public License version 3
##

set -u
set -o pipefail
shopt -s lastpipe

id="$(date +%Y%m%d%H%M).$$"
tab=$'\n'
lf=$'\n'

pdie() {
  echo "$0: ERROR: $1"
  exit 1
}

run() {
  echo "Run: $*" 1>&2
  "$@"
}

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 CONFFILE"
  exit 1
fi

packer="packer"
packer_build_options=()
packer_log=0
base_dir="$(cd "${0%/*}/.." && echo "$PWD")" || exit $?
build_dir="$base_dir/build"
dist_dir="$base_dir/dist"
template_dir="$base_dir/template"
iso_dir="$base_dir/iso"
conf_default="$base_dir/etc/default.conf"
conf_local="$base_dir/etc/local.conf"
box_url_prefix="file://$dist_dir/"
qemu_system="qemu-system-x86_64"

conf="$1"; shift

## ======================================================================

if [[ -f $conf_default ]]; then
  . "$conf_default" || exit $?
fi
if [[ -f $conf_local ]]; then
  . "$conf_local" || exit $?
fi

. "$conf" || exit $?
. "$template_dir/$box_template/template.conf" || exit $?

box_version="${box_version:-$template_version.$conf_version}"
dist_ver_dir="$dist_dir/$box_name/$box_version"
box_build_dir="$build_dir/$box_name.$id.tmp"
packer_build_name="packer-build.$box_name"

## ----------------------------------------------------------------------

typeset -A vars
vars=(
  [iso_dir]="$iso_dir"
)

sed -n 's/^\([a-z][a-z_0-9]*\)=.*/\1/p' "$conf" \
|sort -u \
|while read var_name; do
  [[ $var_name == "box_template" ]] && continue
  eval "vars[$var_name]=\"\$$var_name\""
done

## HACK: Packer QEMU builder with headless=false uses the command-line:
##   qemu-system-x86_64 ... -display sdl ...
## but it fails because some QEMU binary does NOT support SDL display.
if type "$qemu_system" >&/dev/null; then
  if [[ ${vars[headless]-false} == false && ${vars[qemu_display]+set} != set ]]; then
    vars[qemu_display]='none'
    for display in gtk sdl; do
      if "$qemu_system" -display "$display" -version >&/dev/null; then
	vars[qemu_display]="$display"
	break
      fi
    done
  fi
fi

## ======================================================================

mkdir -p "$build_dir" || exit $?
mkdir "$box_build_dir" || exit $?
cd "$box_build_dir" || exit $?
mkdir "$packer_build_name" || exit $?
cd "$packer_build_name" || exit $?

cp -rp "$template_dir/$box_template"/* . || exit $?

## Remove comments in packer.json
mv packer.json packer.json.dist || exit $?
sed '/^ *\/\/.*/d' packer.json.dist >packer.json || exit $?

(
  echo '{'
  for var_name in "${!vars[@]}"; do
    echo "$var_name"
  done \
  |sort \
  |while read var_name; do
    var="${vars[$var_name]//\"/\\\"}"
    var="${var//$tab/\\t}"
    var="${var//$lf/\\n}"
    printf '  "%s": "%s",\n' "$var_name" "$var"
  done
  echo '  "#": "END"'
  echo '}'
) \
>packer.var.json \
;

typeset -a packer_build=(
  "$packer"
    build
    -var-file=packer.var.json
    -on-error=ask
    ${packer_build_options+"${packer_build_options[@]}"}
    packer.json
)

echo '#!/bin/sh' >packer-build.sh || exit $?
echo -E "${packer_build[*]}" >>packer-build.sh || exit $?
chmod +x packer-build.sh || exit $?

## ----------------------------------------------------------------------

run \
  env \
    CHECKPOINT_DISABLE=1 \
    PACKER_LOG="$packer_log" \
    PACKER_CACHE_DIR="$iso_dir/cache" \
    "${packer_build[@]}" \
2>&1 \
|tee \
  packer-build.log \
  "../../$box_name.packer-build.$id.log" \
|| : \
;

mv "$box_name".*.box ../ || exit $?

## ----------------------------------------------------------------------

cd .. || exit $?

tar cf "$packer_build_name.tar" "$packer_build_name" || exit $?

## ----------------------------------------------------------------------

boxes_json=""
for box in *.box; do
  url="$box_url_prefix$box_name/$box_version/$box"
  sha1=$(sha1sum "$box" |sed 's/ .*//')
  provider="${box%.box}"; provider="${provider##*.}"

  box_json=$(printf '      {
	"name": "%s",
	"url": "%s",
	"checksum_type": "sha1",
	"checksum": "%s"
      }\n' "$provider" "$url" "$sha1"
  )

  cat <<EOF >"$provider.json"
{
  "name": "$box_name",
  "description": "$box_name",
  "versions": [{
    "version": "$box_version",
    "providers": [
$box_json
    ]
  }]
}
EOF
done

## ----------------------------------------------------------------------

mkdir -p "$dist_ver_dir" || exit $?

mv \
  *.json \
  "$box_name".*.box \
  "$packer_build_name.tar" \
  "$dist_ver_dir/" \
|| exit $? \
;

## ======================================================================

rm -rf "$box_build_dir"

exit 0
