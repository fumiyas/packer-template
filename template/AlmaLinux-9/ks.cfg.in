## RHEL
#eula --agreed
cdrom

## Original repos (the latest minor version only)
#url --url=https://repo.almalinux.org/almalinux/@os_version@/BaseOS/x86_64/kickstart/
#repo --name=AppStream --baseurl=https://repo.almalinux.org/almalinux/@os_version@/AppStream/x86_64/kickstart/

## Mirror repos in Japan (the latest minor version only)
#url --url=https://ftp.iij.ad.jp/pub/linux/almalinux/@os_version@/BaseOS/x86_64/kickstart/
#repo --name=AppStream --baseurl=http://ftp.iij.ad.jp/pub/linux/almalinux/@os_version@/AppStream/x86_64/kickstart/

## Original valut repos (past minor versions)
url --url=https://repo.almalinux.org/vault/@os_version@/BaseOS/x86_64/kickstart/
repo --name=AppStream --baseurl=https://repo.almalinux.org/vault/@os_version@/AppStream/x86_64/kickstart/

text
skipx

zerombr
clearpart --all --initlabel
autopart --noswap
bootloader --location=mbr --append="plymouth.enable=0"
firstboot --disabled
reboot

lang en_US.UTF-8
timezone --utc Asia/Tokyo
keyboard jp

## Deleted in %post script
rootpw root

selinux --disabled

network --bootproto=dhcp --hostname=localhost
firewall --enabled --ssh
services --enabled="sshd"

## ================================================================================

%packages --exclude-weakdeps

@^minimal-environment
sudo
zsh
bash-completion
tar
openssl
openssh-server
openssh-clients

-iwl*-firmware
-microcode_ctl

%end

## ================================================================================

%post --nochroot --interpreter=/bin/bash --log=/var/log/anaconda/ks.post.log
root="$ANA_INSTALL_PATH"
log="/var/log/anaconda/ks.post.verbose.log"
trap_error_timelimit=3600

if [[ -z $CHROOTED ]]; then
  export CHROOTED=set
  mkdir -p -m 0755 "$root${log%/*}"
  exec > >(tee -a "$root$log" |sed 's/^/ks.cfg: %post: /' >>/dev/pts/0)
  exec 2>&1
  cp -p "$0" "$root$0"
  exec chroot "$root" /bin/bash "$0" "$@"
  exit $?
fi

set -e
set -u
umask 0022
export LC_ALL=C

trap_error() {
  {
    echo "ERROR: %post script in ks.cfg failed."
    echo "ERROR: Sleeping $trap_error_timelimit seconds for you to debug..."
    echo "ERROR: Script:    $root$0"
    echo "ERROR: Exit code: $1"
    echo "ERROR: Date:      $(date --iso-8601=minutes)"
    echo "ERROR: Log:       $root$log"
  } \
  1>&2 \
  ;

  sleep "$trap_error_timelimit"

  exit "$1"
}
trap 'rc=$?; set +x; trap_error "$rc"' EXIT

echo "Startting %post script in ks.cfg"
set -x

packer_url=$(
  sed \
    -e 's/.* inst\.ks=//' \
    -e 's/ .*//' \
    -e 's|[^/]*$||' \
    /proc/cmdline \
 ;
)

mkdir -p /root/packer
curl \
  --output /root/packer/packer-build.tar.gz \
  "$packer_url/packer-build.tar.gz" \
;
curl_http_code=$(
  curl \
    --output /root/packer/build.conf \
    --write-out '%{http_code}' \
    "$packer_url/build.conf" \
  ;
)
if [[ $curl_http_code == 200 ]]; then
  . /root/packer/build.conf
else
  rm -f /root/packer/build.conf
fi

if [[ ! -f /etc/ssh/sshd_config.dist ]]; then
  cp -a /etc/ssh/sshd_config{,.dist}
fi
sed \
  -e 's/^#*\(PermitRootLogin\).*/\1 yes/' \
  </etc/ssh/sshd_config.dist \
  >/etc/ssh/sshd_config \
;

if [[ ! -f /etc/default/grub.dist ]]; then
  cp -a /etc/default/grub{,.dist}
fi
sed \
  -E \
  -e '/^GRUB_CMDLINE_LINUX=/ { s/([" ])rhgb([" ])/\1\2/; s/  +/ /g; }' \
  -e '/^GRUB_CMDLINE_LINUX=/ { s/([" ])quiet([" ])/\1\2/; s/  +/ /g; }' \
  -e '/^GRUB_CMDLINE_LINUX=/ { s/([" ])crashkernel=\w+([" ])/\1\2/; s/  +/ /g; }' \
  </etc/default/grub.dist \
  >/etc/default/grub \
;
grub2-mkconfig -o /boot/grub2/grub.cfg

passwd --delete root

trap - EXIT
%end
